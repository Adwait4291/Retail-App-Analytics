# Defines the services (containers) that make up your application.
services:
  # Service to build the base image with common dependencies.
  # This must be built before the pipeline and streamlit services.
  base:
    build:
      context: .
      dockerfile: Dockerfile.base # Uses the Dockerfile for the base image.
    image: retail-ml-base:latest # Tags the built image so other services can use it.

  # Service for the data processing and model training pipeline.
  ml-pipeline:
    build:
      context: .
      dockerfile: Dockerfile.pipeline
    container_name: retail_24-ml-pipeline-1
    # This service depends on the 'base' image being built and mongodb being ready.
    depends_on:
      - base
      - mongodb
    volumes:
      - ./src:/app/src # Mounts source code for easy development
      - ./data:/app/data # Mounts data directory
      - models:/app/models # Mounts a shared volume for models
    env_file:
      - ./.env # Loads environment variables from the .env file.
    restart: unless-stopped

  # Service for the Streamlit web application.
  streamlit-app:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: retail_24-streamlit-app-1
    # This service depends on the 'base' image being built and mongodb being ready.
    depends_on:
      - base
      - mongodb
    ports:
      - "8501:8501" # Exposes the Streamlit port to the host machine.
    volumes:
      - ./src:/app/src # Mounts source code
      - models:/app/models # Mounts the shared models volume
    env_file:
      - ./.env # Loads environment variables.
    restart: unless-stopped

  # Service for the MongoDB database.
  mongodb:
    image: mongo:latest
    container_name: retail_24-mongodb-1
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    env_file:
      - ./.env
    restart: unless-stopped

# Defines the named volumes used by the services for persistent storage.
volumes:
  models: # Volume to share trained models between services.
    driver: local
  mongodb_data: # Volume to persist database data.
    driver: local
